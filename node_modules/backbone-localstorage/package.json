{
  "name": "backbone-localstorage",
  "version": "0.3.2",
  "description": "Backbone localStorage",
  "main": "backbone-localstorage.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/moorinteractive/backbone-localstorage.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "keywords": [
    "backbone",
    "local",
    "storage",
    "cache"
  ],
  "author": {
    "name": "R. Moorman",
    "email": "rob@moori.nl"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/moorinteractive/backbone-localstorage/issues"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-uglify": "~0.2.7",
    "grunt-contrib-qunit": "~0.3.0"
  },
  "readme": "# Backbone localStorage\n\n[![Build Status](https://secure.travis-ci.org/moorinteractive/backbone-localstorage.png?branch=master)](https://travis-ci.org/moorinteractive/backbone-localstorage)\n\n## Installing Backbone localStorage\n\nThe package can be installed through [npm](https://npmjs.org/) or [bower](http://bower.io/).\n\n##### Using npm\n```\nnpm install backbone-localstorage\n```\n\n##### Using bower\n```\nbower install backbone-localstorage\n```\n\nAfter installing the package, you can grab the `backbone-localstorage.js` or the minified version of it `backbone-localstorage.min.js`\n\n## Using Backbone localStorage\n\nWhen data is fetched via `Backbone.sync` (models & collections), the reponse will be stored with `JSON.stringify` in localStorage (before any `success` method is called).\nThe name under the data is stored is in the following format:\n\n```\n<prefix>:<url>\n```\n\nWhere `prefix` is the value set by ``Backbone.LocalStorage.setPrefix`` (default ``unknown``) and where ``url`` is the remote url from a model or collection.\n\n##### Using Backbone.Model\n```\nvar model = Backbone.Model.extend({\n    urlRoot: '/api/pages',\n    localStorage: true\n});\n```\n\n##### Using Backbone.Collection\n```\nvar collection = Backbone.Collection.extend({\n    url: '/api/pages',\n    localStorage: true\n});\n```\n\n##### Using forceRefresh option\n```\nvar collection = Backbone.Collection.extend({\n    url: '/api/pages',\n    localStorage: true\n});\n\ncollection.fetch({forceRefresh:true});\n```\n\n##### Set a prefix\n```\nBackbone.LocalStorage.setPrefix('my-namespace');\n```\n\n## Autoclear localStorage when new content is available\n\nSince many web applications have managable content, it's hard to determine when to recognize new content.\nThe only thing we know about our data is the url and it's timestamp when the data is strored in localStorage.\nWith the method `setVerion` you can determine in which state of content the localStorage is set.\nAt the point you call this method verions are compared (in strict mode).\nIf the verion is not equal to it's, if present, previous version the localStorage will be cleared (only data set under `prefix`).\n```\nBackbone.LocalStorage.setVersion(100);\n```\nThe value may be of any type (int, string, etc.).\n\n## Changelog\n\n0.3.2\n\n* Fixed url property compatible as a function, not just as a string value\n\n0.3.1\n\n* Fixed support of localStorage in case of iOS private mode\n* Added tests for storing objects and string (stringified or not)\n\n0.3.0\n\n* Added forceRefresh option\n* Refactored id to url of model/collection\n\n0.2.1\n\n* Fixed setVersion clear localStorage when verions differs\n\n0.2.0\n\n* Fixed issue return null when no localStorage can be found\n* Added documentation\n\n0.1.0 (released on friday, november 15, 2013)\n\n* Prototype",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/moorinteractive/backbone-localstorage",
  "_id": "backbone-localstorage@0.3.2",
  "_from": "backbone-localstorage@"
}
